## version: '3.8'

services:
  # MCP Gateway/Proxy for centralized security and threat detection
  mcp-gateway:
    build:
      context: ./gateway
      dockerfile: Dockerfile
    ports:
      - "8811:8811"  # MCP Gateway port
      - "9090:9090"  # Management/monitoring port
    environment:
      - NODE_ENV=development
      - LOG_LEVEL=info
      - GATEWAY_PORT=8811
      - MANAGEMENT_PORT=9090
    networks:
      - mcp-internal
    volumes:
      - ./config/gateway.yaml:/app/config/gateway.yaml:ro
      - gateway-logs:/app/logs
      - ./secrets:/app/secrets:ro
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9090/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE

  # File System MCP Server
  mcp-filesystem:
    build:
      context: ./servers/filesystem
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=development
      - ALLOWED_DIRECTORIES=/workspace,/tmp/shared
      - READ_ONLY_MODE=false
    networks:
      - mcp-internal
    volumes:
      - ./workspace:/workspace
      - shared-temp:/tmp/shared
      - filesystem-logs:/app/logs
    restart: unless-stopped
    user: "1000:1000"  # Run as non-root user
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL

  # Database MCP Server
  mcp-database:
    build:
      context: ./servers/database
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=development
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=mcpdata
    networks:
      - mcp-internal
    volumes:
      - database-logs:/app/logs
      - ./secrets/db-credentials:/app/secrets:ro
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    user: "1000:1000"
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=mcpdata
      - POSTGRES_USER=mcpuser
      - POSTGRES_PASSWORD_FILE=/run/secrets/db_password
    networks:
      - mcp-internal
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d:ro
    secrets:
      - db_password
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U mcpuser -d mcpdata"]
      interval: 30s
      timeout: 10s
      retries: 5
    security_opt:
      - no-new-privileges:true

  # Git MCP Server
  mcp-git:
    build:
      context: ./servers/git
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=development
      - GIT_SAFE_DIRECTORY=/workspace
    networks:
      - mcp-internal
    volumes:
      - ./workspace:/workspace
      - git-logs:/app/logs
      - ~/.gitconfig:/home/mcpuser/.gitconfig:ro
    restart: unless-stopped
    user: "1000:1000"
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL

  # Web/API MCP Server
  mcp-web:
    build:
      context: ./servers/web
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=development
      - ALLOWED_DOMAINS=api.github.com,api.slack.com,httpbin.org
      - RATE_LIMIT_PER_MINUTE=60
    networks:
      - mcp-internal
      - mcp-external  # Needs external access
    volumes:
      - web-logs:/app/logs
      - ./secrets/api-keys:/app/secrets:ro
    restart: unless-stopped
    user: "1000:1000"
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL

  # MCP Inspector for development and debugging
  mcp-inspector:
    image: modelcontextprotocol/inspector:latest
    ports:
      - "5173:5173"  # Inspector UI
    environment:
      - MCP_SERVER_URL=http://mcp-gateway:8811
    networks:
      - mcp-internal
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true

networks:
  mcp-internal:
    driver: bridge
    internal: true  # No external access
    ipam:
      config:
        - subnet: 172.20.0.0/16
  mcp-external:
    driver: bridge
    # External access for web services

volumes:
  postgres-data:
  gateway-logs:
  filesystem-logs:
  database-logs:
  git-logs:
  web-logs:
  shared-temp:

secrets:
  db_password:
    file: ./secrets/db_password.txt 